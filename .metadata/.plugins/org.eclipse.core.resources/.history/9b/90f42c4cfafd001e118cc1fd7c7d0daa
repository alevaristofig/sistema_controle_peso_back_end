package com.sistemacontrolepeso.api.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;

import com.sistemacontrolepeso.api.assembler.PesoInputDisassembler;
import com.sistemacontrolepeso.api.assembler.PesoModelAssembler;
import com.sistemacontrolepeso.api.model.PesoModel;
import com.sistemacontrolepeso.api.model.input.PesoInput;
import com.sistemacontrolepeso.domain.model.Peso;
import com.sistemacontrolepeso.domain.repository.PesoRepository;
import com.sistemacontrolepeso.domain.service.CadastroPesoService;
import com.sistemacontrolepeso.model.PesoTestData;

@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
@ExtendWith(MockitoExtension.class)
//@TestPropertySource("/application.properties")
@AutoConfigureTestDatabase(replace = Replace.NONE)
@ActiveProfiles("test")
public class PesoControllerTest {
	
	@Mock
	CadastroPesoService pesoService;
	
	@Mock
	PesoRepository pesoRepository;
	
	@Mock
	PesoInputDisassembler pesoInputDisassembler;
	
	@Mock
	PesoModelAssembler pesoModelAssembler;
	
	@Mock
	ModelMapper modelMapper;
	
	@InjectMocks
	PesoController pesoController;
	
	@Spy
	Peso peso = PesoTestData.umNovoPeso();
	
	@Spy
	PesoModel pesoModel = PesoTestData.umNovoPesoModel();
	
	@Spy
	PesoInput pesoInput = PesoTestData.umNovoPesoInput();
	

	@Nested
	class CadastroComPesoValido{								
						
		@BeforeEach
		void init() {
						
			Mockito.when(pesoController.adicionar(pesoInput)).thenReturn(pesoModel);
			//Mockito.when(pesoService.salvar(peso)).thenReturn(peso);
		}
		
		@Test
		void Dado_um_peso_valido_Quando_criar_Entao_deve_retornar_status_201() {			
			pesoController.adicionar(pesoInput);
			
			assertThat(HttpStatus.CREATED.value()).isEqualTo(201);
		}		
	}
	
	@Nested
	class EdicaoComPesoValido {
		
		@BeforeEach
		void init() {
			//Mockito.when(pesoController.adicionar(pesoInput)).thenReturn(pesoModel);
			//Mockito.when(pesoController.buscar(1L)).thenReturn(pesoModel);
			Mockito.when(pesoController.atualizar(1L, pesoInput)).thenReturn(pesoModel);
		}
		
		@Test
		void Dado_um_peso_valid0_Quando_editar_Entao_deve_retornar_status_200() {
			pesoInput.setValor(98.98);
			
			pesoController.atualizar(1L, pesoInput);
			
			assertThat(HttpStatus.OK.value()).isEqualTo(200);	
		}
	}
}
