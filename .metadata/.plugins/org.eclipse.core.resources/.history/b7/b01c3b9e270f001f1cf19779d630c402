package com.sistemacontrolepeso.domain.repository;

import java.util.Optional;

import org.hibernate.query.results.ResultSetMapping;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.sistemacontrolepeso.domain.model.Pessoa;

import jakarta.persistence.ColumnResult;
import jakarta.persistence.ConstructorResult;
import jakarta.persistence.NamedNativeQueries;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.SqlResultSetMapping;
import jakarta.transaction.Transactional;

public interface PessoaRepository extends JpaRepository<Pessoa, Long> {

	Optional<Pessoa> findByEmail(String email);
	
	/*@Query(value = "select p.id, p.nome "
			+ "from oauth2_authorization oauth "
			+ "inner join pessoa p ON p.email = oauth.principal_name "
			+ "where oauth.access_token_value= :token",
			nativeQuery = true)
	IdEmail buscarIdEmailToken(@Param("token") String token);*/
	
	@NamedNativeQuery(name = "Pessoa.buscarIdEmailToken(@Param(\"token\") String token)",
					  query = "select p.id AS id, p.email AS email "
								+ "from oauth2_authorization oauth "
								+ "inner join pessoa p ON p.email = oauth.principal_name "
								+ "where oauth.access_token_value= :token"
					  ResultSetMapping = "Mapping.PessoaDto")
	@SqlResultSetMapping(name = "Mapping.PessoaDto",
						 classes = @ConstructorResult(targetClass = PessoaDto.class,
						 			columns = {
						 					@ColumnResult(name = "id"),
						 					@ColumnResult(name = "email"),
						 					@ColumnResult(name = "token")
						 			}
								 ) 
	
			)
	
	@Modifying
	@Transactional
	@Query(value = "delete from oauth2_authorization "
			+ "where access_token_value= :token",
			nativeQuery = true)
	void removerToken(@Param("token") String token);
	
	public class PessoaDto {
		private Long id;
		private String email;
		private String token;
		
		public PessoaDto(Long id, String email) {
			this.id = id;
			this.email = email;
		}
		
		public Long getId() {
			return id;
		}
		
		public String getEmail() {
			return email;
		}
		
		public String getToken() {
			return token;
		}
	}
}
